C51 COMPILER V9.57.0.0   SERIAL                                                            05/23/2018 11:44:45 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Objects\serial.obj
COMPILER INVOKED BY: C:\C51\Keil_v5\C51\BIN\C51.EXE serial.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\serial.lst) TABS(2) OBJECT(.\Objects\serial.obj)

line level    source

   1          #include<serial.h>
   2          #include<lcd.h>
   3          #include<reg52.h>
   4          #include<myString.h>
   5          
   6          //0   EXTERNAL INT 0  0003h
   7          //1   TIMER/COUNTER 0   000Bh
   8          //2   EXTERNAL INT 1  0013h
   9          //3   TIMER/COUNTER 1   001Bh
  10          //4   SERIAL PORT   0023h
  11          //5   TIMER/COUNTER 2 (8052)  002Bh
  12          
  13          #define NORMAL 0
  14          #define BLOQUEADA 1
  15          #define AUTONOMA 2 
  16          
  17          #define OK 0
  18          #define PE 1
  19          #define PC 2 
  20          #define PT 3
  21          #define PS 4
  22          #define PG 5 
  23          #define PP 6
  24          
  25          #define NAO 0
  26          #define LE_N 1
  27          #define LE_PARAMETRO 2
  28          
  29          char fifo_recepcao[30];
  30          
  31          void configura_serial(){
  32   1        //configura o timer 1
  33   1        TMOD &= 0x0F;
  34   1        TMOD |= 0x20; //timer de 8 bits com recarga automática
  35   1        TL1 = 0xFD; //19200 bps
  36   1        TH1 = 0xFD; //recarga
  37   1        TR1 = 1; //liga o timer
  38   1        //configura a serial
  39   1        SCON = 0x50; //serial com freq variável + habilita recepcao
  40   1        EA = 1; //habilita as interrrupcoes do chip
  41   1        ES = 1; //habilita interrupcao da serial
  42   1      }
  43          
  44          void escreve_serial(char* mensagem){
  45   1      char i;
  46   1        for(i = 0; mensagem[i] != 0 ; i++){
  47   2          SBUF = mensagem[i];
  48   2          while(!TI);
  49   2          TI=0;
  50   2        }
  51   1      }
  52          
  53          void clear_FIFO(){
  54   1        char i;
C51 COMPILER V9.57.0.0   SERIAL                                                            05/23/2018 11:44:45 PAGE 2   

  55   1        for (i = 0; fifo_recepcao[i] != '\0' && i<30; i++) fifo_recepcao[i] = '\0';
  56   1        
  57   1      }
  58          
  59          
  60          
  61          void trata_interrupcao_serial() interrupt 4 { 
  62   1        static char pos = 0, l_final = 2, lendo_par = 0;
  63   1        char add;
  64   1        if(RI == 1){
  65   2          RI = 0;
  66   2          fifo_recepcao[pos] = SBUF;
  67   2          pos++;
  68   2          
  69   2          if(pos == l_final){
  70   3            //Aqui existem tres opções: se nao ha parametros a serem lidos, l_final continuara a mesmo
  71   3            //
  72   3            if (lendo_par == NAO){
  73   4              add = trata_dados();
  74   4              
  75   4              //Se trata_dados() mostra que não há mais bytes a serem lidos, limpa a FIFO e volta para 
  76   4              //a posição inicial
  77   4              if (add == 0){
  78   5                clear_FIFO();
  79   5                pos = 0;
  80   5                l_final = 2;
  81   5              }
  82   4              
  83   4              //Se trata_dados() envia o valor -1, isso quer dizer que a serial está esperando o valor 
  84   4              //n que indica o número de bytes a serem lidos
  85   4              else if(add == -1) {
  86   5                lendo_par = LE_N;
  87   5                l_final++;
  88   5              }
  89   4              
  90   4              //Se trata_dados() mostra que há mais bytes a serem lidos, adiciona o número de bytes 
  91   4              else{
  92   5                l_final += add;
  93   5                lendo_par = LE_PARAMETRO;
  94   5              } 
  95   4            }
  96   3            else if (lendo_par == LE_N){
  97   4              add = fifo_recepcao[2];
  98   4              l_final += add;
  99   4              lendo_par = LE_PARAMETRO;
 100   4            }
 101   3            else if (lendo_par == LE_PARAMETRO){
 102   4              le_parametros();
 103   4              clear_FIFO();
 104   4              pos = 0;
 105   4              lendo_par = NAO;
 106   4              l_final = 2;
 107   4            }     
 108   3          }
 109   2        }
 110   1      }
 111          
 112          void le_parametros(){
 113   1        if(fifo_recepcao[0] == 'P'){
 114   2          switch(fifo_recepcao[1]){
 115   3            case('H'):
 116   3              hora = fifo_recepcao[2];
C51 COMPILER V9.57.0.0   SERIAL                                                            05/23/2018 11:44:45 PAGE 3   

 117   3              minuto = fifo_recepcao[3];
 118   3              return;
 119   3              
 120   3            case('S'):
 121   3              if (respostaPC == PS){
 122   4                copia_string(pacote, fifo_recepcao);
 123   4                respostaPC = OK;
 124   4              }
 125   3              return;
 126   3            case('G'):
 127   3              if (respostaPC == PG){
 128   4                copia_string(pacote, fifo_recepcao);
 129   4                respostaPC = OK;
 130   4              }
 131   3              return;
 132   3              
 133   3            case('P'):
 134   3              if (respostaPC == PP){
 135   4                copia_string(pacote, fifo_recepcao);
 136   4                respostaPC = OK;
 137   4              }
 138   3              return;
 139   3          }
 140   2        }
 141   1      }
 142          
 143          //Trata dados deve ler toda a mensagem mandada pela serial
 144          //Deve retornar o quanto mais deve ser lido nos casos em que a resposta do aplicativo
 145          //tem parâmatros junto
 146          char trata_dados(){
 147   1        
 148   1        if(fifo_recepcao[0] == 'P'){
 149   2          
 150   2          switch(fifo_recepcao[1]){
 151   3            case('L'):
 152   3              //Libera urna
 153   3              OLU = 1; //Ordem de Liberar Urna 
 154   3              escreve_serial("ML");
 155   3              return 0;
 156   3            case('B'):
 157   3              //Bloqueia urna
 158   3              OLU = 0; //Ordem de Liberar Urna
 159   3              escreve_serial("MB");
 160   3              return 0;
 161   3            case('H'):
 162   3              //Atualiza o horario
 163   3              escreve_serial("MH");
 164   3              return 2;
 165   3            case('U'):
 166   3              //Envia boletim de urna
 167   3              return 0;
 168   3            case('E'):
 169   3              //Confirma entrada do eleitor
 170   3              if (respostaPC == PE){
 171   4                respostaPC = OK;
 172   4              }
 173   3              return 0;
 174   3            case('C'):
 175   3              //Confirma conclusão do voto
 176   3              if (respostaPC == PC){
 177   4                respostaPC = OK;
 178   4              }
C51 COMPILER V9.57.0.0   SERIAL                                                            05/23/2018 11:44:45 PAGE 4   

 179   3              return 0;
 180   3            case('T'):
 181   3              //Confirma timeout do eleitor
 182   3              if (respostaPC == PT){
 183   4                respostaPC = OK;
 184   4              }
 185   3              return 0;
 186   3            case('S'):
 187   3              //Confirma envio do nome de senador
 188   3              return -1;
 189   3            case('G'):
 190   3              //Confirma envio do nome de governador
 191   3              return -1;
 192   3            case('P'):
 193   3              //Confirma envio do nome de presidente
 194   3              return -1;
 195   3            default:
 196   3              return 0;
 197   3              
 198   3          }
 199   2        }
 200   1        return 0;
 201   1      }
 202          
 203          void solicita_senador(char* codigo){
 204   1        char mensagem[6];
 205   1        mensagem[0] = 'M';
 206   1        mensagem[1] = 'S';
 207   1        mensagem[2] = 2;
 208   1        mensagem[3] = codigo[0];
 209   1        mensagem[4] = codigo[1];
 210   1        mensagem[5] = '\0';
 211   1        respostaPC = PS;
 212   1        escreve_serial(mensagem);
 213   1      }
 214          
 215          void solicita_governador(char* codigo){
 216   1        
 217   1        char mensagem[6];
 218   1        mensagem[0] = 'M';
 219   1        mensagem[1] = 'G';
 220   1        mensagem[2] = 2;
 221   1        mensagem[3] = codigo[0];
 222   1        mensagem[4] = codigo[1];
 223   1        mensagem[5] = '\0';
 224   1        respostaPC = PG;
 225   1        escreve_serial(mensagem);
 226   1      }
 227          
 228          void solicita_presidente(char* codigo){
 229   1        
 230   1        char mensagem[6];
 231   1        mensagem[0] = 'M';
 232   1        mensagem[1] = 'P';
 233   1        mensagem[2] = 2;
 234   1        mensagem[3] = codigo[0];
 235   1        mensagem[4] = codigo[1];
 236   1        mensagem[5] = '\0';
 237   1        respostaPC = PP;
 238   1        escreve_serial(mensagem);
 239   1      }
 240          
C51 COMPILER V9.57.0.0   SERIAL                                                            05/23/2018 11:44:45 PAGE 5   

 241          
 242          
 243          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    560    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
